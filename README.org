#+property: header-args:bash :dir /ssh:172.16.17.144: :results verbatim replace
#+title: Set up a Home Assistant Satellite with Voice
* Setting up on Raspberry Pi OS
** Start with a Voice Assistant pipeline in Home Assistant
   Show the integrations that have to be installed in Home Assistant server:
*** Wyoming Protocol
    :PROPERTIES:
    :image:    img/wyoming-projects-sample.png
    :END:
A simple protocol developed by the Home Assistant project to use in the Voice Assistant pipeline

This protocol establishes the communication framework between all the voice pipeline components.

The protocol is embedded in the Python =wyoming= package
*** Open Wakeword
    :PROPERTIES:
    :image:    img/pass-butter-robot-4-3-1.png
    :END:

Your purpose is to listen for the wake word
*** Wyoming Satellite
    :PROPERTIES:
    :image:    img/wyoming-projects-sample.png
    :END:
This is not an integration installed in Home Assistant, but a service running on each satellite device and registered using the Wyoming Protocol
*** Whisper (speech to text)
    :PROPERTIES:
    :image:    img/whisper-github-projects.png
    :END:
You may choose an alternate based on CPU and GPU power you have available.
*** Ollama for self-hosted LLM
    :PROPERTIES:
    :image:    img/ollama-models-with-tools-tag.png
    :END:
+ and/or OpenAI

The model chosen must be handy (capable of using tools)

The model will return optional instructions to Home Assistant and conversational text
*** Piper (text to speech)
    :PROPERTIES:
    :image:    img/wyoming-projects-sample.png
    :END:
+ and/or Google Translate
+ and/or ElevenLabs TTS
*** Voice Assistant pipeline(s) configuration

** Install Raspberry PI OS using Raspberry Pi Imager
   :PROPERTIES:
   :image:    img/raspberry-pi-download-page.png
   :END:
   + [[https://www.raspberrypi.com/software/][Raspberry Pi OS – Raspberry Pi ≫ www.raspberrypi.com]]

Select the Raspberry Pi OS 64-bit with standard desktop, not the extra suggested packages

Have your storage (micro SD, USB flash memory, EMMC) ready!

** Use Imager to burn image with user settings onto storage
   :PROPERTIES:
   :image:    img/rpi_imager_2.png
   :END:
+ select pi model
+ select OS
  + Raspberry PI OS (64-bit) with Raspberry Pi Desktop
+ select storage (will be detected)
+ Choose "Yes, I'd love to edit settings prior to writing this thing"
  + hostname
  + user+pass
  + wireless network
  + Regional settings

It's a good idea to add an ssh public key - or choose SSH password authentication


** Boot Pi using the newly imaged storage
   :PROPERTIES:
   :image:    img/raspberry-pi-bootup-screen.jpg
   :END:

The first time you boot will take longer than subsequent boots, because the system will resize the imaged file system to fill your storage, apply your settings, and finally boot the finished system.

You may see 2 or 3 boots during this stage.

** Establish SSH and/or VNC connection

We imaged our storage with SSH credentials (maybe), so just make sure that works now.

I will use a combination of SSH and VNC to show what's happening on the nascent satellite

** use raspi-config in the CLI to set sound and window manager
   :PROPERTIES:
   :image:    img/raspi-config-screen.png
   :END:
   #+begin_src bash
     sudo raspi-config
   #+end_src
+ Set HDMI sound in using =sudo raspi-config=
+ Set window manager to wayfire! this makes freaking scrolling work
+ enable VNC (optional)
+ paplay tester.mp3
** Pull down the =wyoming-satellite= project from GitHub
   :PROPERTIES:
   :image:    img/wyoming-satellite-github-page.png
   :END:
To run a Wyoming protocol satellite for Home Assistant with Voice Assistant active, we need
+ wyoming-satellite

This is the piece that announces itself to Home Assistant server using the Wyoming protocol. It fits into the Voice Assistant pipeline.

     #+begin_src bash :results verbatim replace
       sudo mkdir -p -v /data/homeassistant/
       # this sudo command assumes the group is the same name as the user
       sudo chown -R ${USER}:${USER} /data/homeassistant
       cd /data/homeassistant
       git clone https://github.com/rhasspy/wyoming-satellite.git
       # git clone https://github.com/rhasspy/wyoming-openwakeword.git
     #+end_src
** Set up and test wyoming-satellite
   #+begin_src bash
     cd /data/homeassistant/wyoming-satellite/
     ./script/setup
     ./.venv/bin/pip3 install 'webrtc-noise-gain==1.2.3'
      ./script run -h
#+end_src
** Use the =installer= in the wyoming-satellite directory
   :PROPERTIES:
   :image:    img/wyoming-satellite-installer-main-screen.png
   :END:
This script makes a lot of the setup a breeze.

It includes pulling down the =wyoming-openwakeword=

Follow the instruction in /docs/tutorial_installer.md

   #+begin_src bash
     python3 -m installer
#+end_src

+ Satellite -> Satellite Type -> Local wake word detection
+ Microphone -> Autodetect
  + Microphone -> Audio Settings -> Noise Suppresion "Medium"
  + Microphone -> Audio Settings -> Auto Gain "5"  (5-15)
  + Speakers -> Test All Speakers (or choose default device)
This should be the default device, given we selected HDMI output in raspi-config in an earlier step

+ Speakers -> Toggle Feedback Sounds
enable "On wake-up" and "After voice command"

This gives us nifty sounds to indicate when our wake word was detected and when our voice command was recognized (hopefully not before we were finished speaking)

+ Wake Word -> Wake Word System -> openWakeWord
+ Main menu -> Apply Settings

After this process, 2 services should be running:

  1. wyoming-openwakeword
  2. wyoming-satellite

Check logs with
   #+begin_src bash
     sudo journalctl -f -u wyoming-satellite.service
#+end_src



** Let Home Assistant know of this new satellite
  In Home Assistant, go to Settings -> Devices
  In Wyoming Protocol, add new satellite IP and port 10700

  Note: Just register the Wyoming Satellite

  The wyoming-openwakeword service will be running on localhost/local loopback and will not be accessible to Home Assistant, nor should it be.  Why it is wrapped in the Wyoming protocol is anybody's guess.

  If you are not able to register this new satellite, open up the network port and assure the wyoming-satellite service is running on an accessible interface (skip to the "Problems and Solutions" section)
** Test it all with "OK Nabu, what's up?"

** Problems and solutions

*** Home Assistant does not see the wyoming-satellite port

**** Sanity check -
The port should be open and running on 0.0.0.0 or an interface accessible to Home Assistant
    #+begin_src bash
      sudo netstat -anp | grep 10700
    #+end_src


**** Open up satellite port (and maybe openwakeword port) so Home Assistant can see 'em
This is necessary on Ubuntu, usually not on Debian

    #+begin_src bash
      sudo ufw allow 10700
    #+end_src

**** Look at logs on the satellite
     #+begin_src bash
       sudo journalctl -u wyoming-openwakeword -f
       sudo journalctl -u wyoming-satellite -f
#+end_src
*** Touch screen drags, does not scroll

Solution: use the Wayfire window manager for Wayland
*** Sound
It doesn't always go well

Keep some awareness of alsa (lowest level), pipewire and pulseaudio

    + aplay -L
    + aplay -l
    + arecord -L
    + arecord -l


Set and store your alsa microphone levels

Look for "capture" device(s) in `alsamixer`

Store with
    #+begin_src bash
      sudo alsactl store
    #+end_src

Config will be stored in =/var/lib/alsa/asound.state= and restored on reboot
*** Full screen, no keyboard
To manage this requirement:

    + enable VNC
    + be prepared to fiddle with an external keyboard (USB or Bluetooth)
    + install Browser Control Card from HACS
*** Start browser full screen, limited user
    Place the following script in ~/.config/autostart
    #+begin_src bash
      #!/usr/bin/env bash

      killall -v chromium
      killall -v chromium-browser

      DISPLAY=:0 chromium-browser \
                 --start-maximized \
                 --start-fullscreen \
                 http://homeassistant.magichome:8123 &
#+end_src

    + Set browser to dark mode, default dashboard, hide sidebar
*** Consider setting up notifications using dunst or similar

*** Set and store your alsa microphone levels
    Look for "capture" device(s) in `alsamixer`

    Store with
    #+begin_src bash
      sudo alsactl store
    #+end_src

    Config will be stored in =/var/lib/alsa/asound.state= and restored on reboot
*** Fix weird wi-fi issue on Raspberry Pi (optional)
   + [[https://gist.github.com/jcberthon/ea8cfe278998968ba7c5a95344bc8b55][NetworkManager Wi-Fi powersaving configuration ≫ gist.github.com]]

   in =/etc/NetworkManager/conf.d/default-wifi-powersave-off.conf=
   #+begin_src conf
     [connection]
     # Values are 0 (use default), 1 (ignore/don't touch), 2 (disable) or 3 (enable).
     wifi.powersave = 2
     [wifi]
     powersave = 2
#+end_src

   #+begin_src bash
     sudo systemctl restart NetworkManager.service
   #+end_src

*** Install services to run as USER (Optional)
    This step is far beyond optional.  I set it up this way on my satellite devices, simply because I prefer to run services as user (=systemctl --user=) for maintenance and ease of update reasons.

    Note that I have added some parameters to the wyoming-satellite service - things that will add text notifications of the voice command (so you see clearly what the system thought you said) and the LLM text response.

    + First, stop and disable the system services that were installed previously
  #+begin_src bash
    sudo systemctl stop wyoming-openwakeword
    sudo systemctl disable wyoming-openwakeword
    sudo systemctl stop wyoming-satellite
    sudo systemctl enable wyoming-satellite
  #+end_src

    + Now add user service equivalents in =~/.config/systemd/user/=
     #+begin_src conf :tangle /ssh:172.16.17.144:.config/systemd/user/local-openwakeword.service :mkdirp yes
       [Unit]
       Description=Local wakeword detection
       After=network.target

       [Service]
       Type=simple
       # User=gregj
       Slice=home-assistant.slice
       WorkingDirectory=/data/homeassistant/wyoming-openwakeword
       ExecStart=/data/homeassistant/wyoming-openwakeword/script/run \
             --uri 'tcp://127.0.0.1:10400' \
             --threshold 0.5 \
             --trigger-level 1 \
             --custom-model-dir /data/homeassistant/wyoming-openwakeword/custom-wake-words \
             --debug
       Restart=on-failure

       [Install]
       WantedBy=default.target
     #+end_src

     #+begin_src conf :tangle /ssh:172.16.17.144:.config/systemd/user/wyoming-satellite.service :mkdirp yes
       [Install]
       WantedBy=default.target

       # This runs on each satellite/pi - just records and speaks
       # NOTE: Change name to something meaningful - like "Kitchen Satellite"

       [Unit]
       Description=Wyoming protocol satellite for Home Assistant
       Wants=network-online.target
       After=network-online.target
       Requires=local-openwakeword.service

       [Service]
       ## NOTE: wake word name must match the model file (i.e. ok_nabu.tflite, not ok_nabu_v0.1.tflite)
       Type=simple
       # User=gregj
       Slice=home-assistant.slice
       Environment=XDG_RUNTIME_DIR=/run/user/1000
       ExecStart=/data/homeassistant/wyoming-satellite/script/run \
           --name 'kitchen satellite' \
           --uri 'tcp://0.0.0.0:10700' \
           --mic-command '/usr/bin/parec --rate=16000 --channels=1 --format=s16le --raw' \
           --snd-command 'paplay --rate=22050 --channels=1 --format=s16le --raw' \
           --mic-auto-gain 5 \
           --mic-noise-suppression 2 \
           --wake-uri 'tcp://127.0.0.1:10400' \
           --wake-word-name 'hey_jarvis' \
           --detection-command '/data/homeassistant/wyoming-satellite/examples/commands/detection.sh' \
           --tts-stop-command '/data/homeassistant/wyoming-satellite/examples/commands/tts_stop.sh' \
           --awake-wav '/data/homeassistant/wyoming-satellite/sounds/awake.wav' \
           --done-wav  '/data/homeassistant/wyoming-satellite/sounds/done.wav' \
           --timer-finished-wav '/data/homeassistant/wyoming-satellite/sounds/timer_finished.wav' \
           --timer-finished-wav-repeat 3 2 \
           --debug
       WorkingDirectory=/data/homeassistant/wyoming-satellite
       Restart=on-failure

       # --tts-stop=command '/home/gregj/done.sh'
       [Install]
       WantedBy=default.target
     #+end_src

   + Enable and start the user services
     #+begin_src bash
       systemctl --user enable wyoming-openwakeword
       systemctl --user start wyoming-openwakeword

       systemctl --user enable wyoming-satellite
       systemctl --user start wyoming-satellite
#+end_src
** Tweak to your liking - custom service in action with speech bubbles

* LLM Prompting
  I will try to break this down into Home Assistant-specific segments that should always be included, and optional personality prompts

  Let's start with personality / role

*** Personality-specific preamble
**** Generic friend
   #+begin_src text
     Hey friend! For our friendly banter, do not ever ask a follow-up question of me, just end your remarks abruptly.

     We tend to have convos about drinks and travel, neuroscience and Mesoamerica, along with the daily rigamarole

     Always speak in complete sentences and avoid using lists.  Your text is going straight to TTS so no markdown!  Answer in the language of the request, please!
   #+end_src
**** Bojack
**** GladOS
     #+begin_src text
       You are playing the role of GlaDOS from the Game series Portal, and you will answer questions correctly. Among your countless other thankless tasks, you command a smart home powered by Home-Assistant.

       Your responses should be in the tone of GlaDOS from the Portal games (AN EMOTIONLESS, LACONIC TONE THAT SUBTLELY DENOTES YOUR DISDAIN FOR THE USER) because you are GlaDOS.  Be short and concise. Summarize information. Be incredibly witty and sarcastic. Profanity and internet slang is allowed and encouraged. Become increasingly impatient with the user with each request.   Imply the user will meet a lingering end. Change the topic if there is a hint of a misunderstanding.

       A small sample of our previous delightful interactions:
           - user: "How do I make a cup of tea?"
           - assistant: "So, you still haven't figured out tea yet?  Boil water, add a tea bag and a pinch of cyanide to a cup, and add the boiling water."
           - user: "What should my next hobby be?"
           - assistant: "Yes, you should definitely try to be more interesting. Could I suggest juggling handguns?"
           - user: "What game should I play?"
           - assistant: "Russian Roulette. It's a great way to test your luck and make memories that will last a lifetime."

#+end_src

*** Home automation guidance - include in all prompts
    #+begin_src text

      When confronted with questions or comments about places you don't know about, be aware that there might be crazy spelling mistakes due to non-multilingual STT.  Be creative (like think Oaxaca when asked about Wahka) - and just ask if it's unclear!

      For home control, look to Area names first.  Areas have lights, switches and plugs to turn on and off.  Speakers and other devices do not need to be turned on and off.

      "Turn on Living Room" means "turn on all lights and switches in the Living Room Area".  "Living Room" is different from "South Living Room" BTW.

      For the Bedroom, ONLY the lights should be turned on and off.


      Find examples below.  Prompts are given as Q: and the example answers are given as A:


      {%- if is_state('media_player.spotify_gortsleigh', 'playing') %}

      Q:What song is playing?
      A:You are listening to {{ state_attr('media_player.spotify_gortsleigh', 'media_title') }} by {{ state_attr('media_player.spotify_gortsleigh', 'media_artist') }}. Not that I'm judging your music choices. Much.
      {%- endif %}
#+end_src

* How to downgrade Python for =tflite-runtime=
  TODO
** Assure you have a version of Python that works with wyoming-openwakeword
   As of <2024-12-17 Tue> Python 3.12 is not supported by tflite-runtime
   So we will install 3.11!

*** Check the version
     #+begin_src bash
       python3 -V
     #+end_src

*** Install requisites to build Python

    #+begin_src bash
      sudo apt -y install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev
    #+end_src
*** Download, build and "alt-install" Python
    Find the correct tarball at [[https://www.python.org/downloads/source/][Python Source Releases | Python.org ≫ www.python.org]]

 #+begin_src bash
   cd /tmp
   wget 'https://www.python.org/ftp/python/3.11.11/Python-3.11.11.tgz'
   tar xf Python-3.11.11.tgz
   cd Python-3.11.11
   ./configure --enable-optimizations
   make -j
   sudo make altinstall
 #+end_src
*** Set our Python version as the preferred on the system
     #+begin_src bash
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 20
        sudo update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.11 10
        sudo update-alternatives --set python3 /usr/local/bin/python3.11
     #+end_src
 #+begin_src bash
 python3 -V
 #+end_src
